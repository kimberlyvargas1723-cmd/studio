'use server';
/**
 * @fileOverview A flow to convert text to speech using a Gemini model.
 * 
 * - `textToSpeech`: The main function that takes text and returns a data URI for the audio.
 */

import { ai } from '@/ai/genkit';
import { googleAI } from '@genkit-ai/google-genai';
import { TextToSpeechInputSchema, type TextToSpeechInput, TextToSpeechOutputSchema, type TextToSpeechOutput } from '@/ai/schemas';
import wav from 'wav';


/**
 * Converts a string of text into speech and returns it as a WAV audio data URI.
 * @param {TextToSpeechInput} input - The text to be converted.
 * @returns {Promise<TextToSpeechOutput>} A promise that resolves with the audio data URI.
 */
export async function textToSpeech(input: TextToSpeechInput): Promise<TextToSpeechOutput> {
  return textToSpeechFlow(input);
}


/**
 * Helper function to convert raw PCM audio data to WAV format in Base64.
 * @param {Buffer} pcmData - The raw PCM audio buffer.
 * @param {number} [channels=1] - Number of audio channels.
 * @param {number} [rate=24000] - The sample rate of the audio.
 * @param {number} [sampleWidth=2] - The width of each audio sample in bytes.
 * @returns {Promise<string>} A promise that resolves to the Base64 encoded WAV data.
 */
async function toWav(
  pcmData: Buffer,
  channels = 1,
  rate = 24000,
  sampleWidth = 2
): Promise<string> {
  return new Promise((resolve, reject) => {
    const writer = new wav.Writer({
      channels,
      sampleRate: rate,
      bitDepth: sampleWidth * 8,
    });

    const bufs: Buffer[] = [];
    writer.on('error', reject);
    writer.on('data', (chunk) => bufs.push(chunk));
    writer.on('end', () => resolve(Buffer.concat(bufs).toString('base64')));
    
    writer.write(pcmData);
    writer.end();
  });
}


const textToSpeechFlow = ai.defineFlow(
  {
    name: 'textToSpeechFlow',
    inputSchema: TextToSpeechInputSchema,
    outputSchema: TextToSpeechOutputSchema,
  },
  async (input) => {
    const { media } = await ai.generate({
      model: googleAI.model('gemini-2.5-flash-preview-tts'),
      config: {
        responseModalities: ['AUDIO'],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: { voiceName: 'Algenib' }, // A pleasant, professional voice.
          },
        },
      },
      prompt: input.text,
    });

    if (!media?.url) {
      throw new Error('No audio media was generated by the model.');
    }

    // The model returns a data URI with raw PCM data. We need to convert it to a proper WAV file.
    const audioBuffer = Buffer.from(
      media.url.substring(media.url.indexOf(',') + 1),
      'base64'
    );
    
    const wavBase64 = await toWav(audioBuffer);

    return {
      audioDataUri: `data:audio/wav;base64,${wavBase64}`,
    };
  }
);
