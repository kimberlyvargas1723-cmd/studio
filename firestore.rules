rules_version = '2';

/**
 * FIREBASE FIRESTORE SECURITY RULES
 * =================================
 * Enhanced security rules with role-based access control and data isolation.
 *
 * Security Features:
 * - User authentication required for all operations
 * - Data isolation: Users can only access their own data
 * - Role-based access control (RBAC) for admin/teacher roles
 * - Validated data writes with schema enforcement
 * - Protection against data leakage and unauthorized access
 *
 * Collections Structure:
 * - users/{userId} - User profiles and performance data
 * - users/{userId}/feedbackHistory/{feedbackId} - User-specific feedback
 * - adminUsers/{userId} - Admin and teacher role assignments
 * - sharedResources/{resourceId} - Public study materials (read-only for authenticated users)
 *
 * @see https://firebase.google.com/docs/firestore/security/get-started
 * @see https://firebase.google.com/docs/rules/basics
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    /**
     * Check if the requesting user is authenticated
     */
    function isAuthenticated() {
      return request.auth != null;
    }

    /**
     * Check if the authenticated user is accessing their own data
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    /**
     * Check if the user has admin privileges
     * Admins are defined in the adminUsers collection
     */
    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * Check if the user has teacher privileges
     * Teachers can view student data but not modify it (except feedback)
     */
    function isTeacher() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role in ['teacher', 'admin'];
    }

    /**
     * Validate user profile data structure
     */
    function isValidUserProfile() {
      let data = request.resource.data;
      return data.keys().hasAll(['displayName']) &&
             data.displayName is string &&
             data.displayName.size() > 0 &&
             data.displayName.size() <= 100 &&
             // Ensure performanceData is an array if present
             (!('performanceData' in data) || data.performanceData is list) &&
             // Ensure learningStrategy has correct structure if present
             (!('learningStrategy' in data) || (
               data.learningStrategy.keys().hasAll(['style', 'strategy']) &&
               data.learningStrategy.style is string &&
               data.learningStrategy.strategy is string
             ));
    }

    /**
     * Validate feedback data structure
     */
    function isValidFeedback() {
      let data = request.resource.data;
      return data.keys().hasAll(['feedback', 'areasForImprovement', 'nextStep', 'timestamp', 'topic']) &&
             data.feedback is string &&
             data.feedback.size() > 0 &&
             data.areasForImprovement is string &&
             data.topic is string &&
             data.timestamp is string &&
             data.nextStep is map &&
             data.nextStep.keys().hasAll(['type', 'value']) &&
             data.nextStep.type in ['question', 'summary', 'youtube'] &&
             data.nextStep.value is string;
    }

    // ============================================================================
    // USER PROFILES AND DATA
    // ============================================================================

    /**
     * Users collection - stores user profiles, performance data, and learning strategies
     * Access rules:
     * - Users can read and write their own profile
     * - Teachers and admins can read any profile (for monitoring progress)
     * - Only the user themselves can write/update their own profile
     */
    match /users/{userId} {
      // Allow users to read their own profile, or teachers/admins to read any profile
      allow read: if isOwner(userId) || isTeacher();

      // Only allow users to create/update their own profile with valid data
      allow create: if isOwner(userId) && isValidUserProfile();

      // Allow updates only to own profile with valid data structure
      allow update: if isOwner(userId) && isValidUserProfile();

      // Only admins can delete user profiles
      allow delete: if isAdmin();

      // ========================================================================
      // FEEDBACK HISTORY SUBCOLLECTION
      // ========================================================================

      /**
       * Feedback history subcollection - stores personalized AI feedback
       * Access rules:
       * - Users can read their own feedback
       * - Users can create new feedback entries (from AI flows)
       * - Teachers can read student feedback for monitoring
       * - Teachers can create feedback entries for their students
       * - No one can update or delete feedback (immutable audit trail)
       */
      match /feedbackHistory/{feedbackId} {
        // Users can read their own feedback, teachers can read any student's feedback
        allow read: if isOwner(userId) || isTeacher();

        // Users can create their own feedback, teachers can create for any student
        allow create: if (isOwner(userId) || isTeacher()) && isValidFeedback();

        // Feedback is immutable - no updates allowed
        allow update: if false;

        // Only admins can delete feedback (for data cleanup if needed)
        allow delete: if isAdmin();
      }
    }

    // ============================================================================
    // ADMIN AND TEACHER ROLES
    // ============================================================================

    /**
     * Admin users collection - defines who has elevated permissions
     * Access rules:
     * - Anyone authenticated can check if they're an admin/teacher
     * - Only existing admins can create/modify admin roles
     * - This prevents privilege escalation attacks
     */
    match /adminUsers/{userId} {
      // Anyone can read to check roles (used in helper functions)
      allow read: if isAuthenticated();

      // Only admins can create/modify admin roles
      allow write: if isAdmin();
    }

    // ============================================================================
    // EDUCATIONAL CONTENT COLLECTIONS
    // ============================================================================

    /**
     * Questions collection - stores exam questions and practice problems
     * Access rules:
     * - All authenticated users can read questions (for studying)
     * - Only admins can create/update questions (content management)
     * - Teachers can read for quiz creation
     */
    match /questions/{questionId} {
      // All authenticated users can read questions
      allow read: if isAuthenticated();

      // Only admins can create/update questions
      allow create, update: if isAdmin();

      // Only admins can delete questions
      allow delete: if isAdmin();
    }

    /**
     * Quizzes collection - stores quiz definitions and configurations
     * Access rules:
     * - All authenticated users can read public quizzes
     * - Users can read/write their own private quizzes
     * - Teachers and admins can create public quizzes
     */
    match /quizzes/{quizId} {
      // Users can read public quizzes or their own quizzes
      allow read: if isAuthenticated() &&
        (resource.data.isPublic == true ||
         resource.data.createdBy == request.auth.uid ||
         isTeacher());

      // Users can create quizzes, teachers/admins can create public ones
      allow create: if isAuthenticated() &&
        (request.resource.data.createdBy == request.auth.uid);

      // Only creators and admins can update quizzes
      allow update: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid || isAdmin());

      // Only admins can delete quizzes
      allow delete: if isAdmin();

      // ========================================================================
      // QUIZ ATTEMPTS SUBCOLLECTION
      // ========================================================================

      /**
       * Quiz attempts subcollection - stores user quiz attempts
       * Access rules:
       * - Users can read/write their own attempts
       * - Teachers can read student attempts for monitoring
       * - Attempts are immutable once completed
       */
      match /attempts/{attemptId} {
        // Users can read their own attempts, teachers can read any attempts
        allow read: if isAuthenticated() &&
          (resource.data.userId == request.auth.uid || isTeacher());

        // Users can create their own attempts
        allow create: if isAuthenticated() &&
          request.resource.data.userId == request.auth.uid;

        // Users can update their own incomplete attempts
        allow update: if isAuthenticated() &&
          resource.data.userId == request.auth.uid &&
          (!('completed' in resource.data) || resource.data.completed == false);

        // No one can delete attempts (audit trail)
        allow delete: if false;
      }
    }

    // ============================================================================
    // ADMISSION INFORMATION
    // ============================================================================

    /**
     * Admission info collection - stores UANL admission requirements and guides
     * Access rules:
     * - All authenticated users can read admission information
     * - Only admins can create/update admission content
     */
    match /admissionInfo/{documentId} {
      // All authenticated users can read admission information
      allow read: if isAuthenticated();

      // Only admins can manage admission content
      allow write: if isAdmin();
    }

    /**
     * Shared resources collection - public study materials, guides, etc.
     * Access rules:
     * - All authenticated users can read shared resources
     * - Only teachers and admins can create/update resources
     * - Only admins can delete resources
     */
    match /sharedResources/{resourceId} {
      // All authenticated users can read shared resources
      allow read: if isAuthenticated();

      // Only teachers and admins can create/update resources
      allow create, update: if isTeacher();

      // Only admins can delete resources
      allow delete: if isAdmin();
    }

    // ============================================================================
    // ANALYTICS AND METRICS (Optional - for future use)
    // ============================================================================

    /**
     * Analytics collection - aggregated metrics and statistics
     * Access rules:
     * - Only teachers and admins can read analytics
     * - Only the system (server-side) should write analytics
     * - This prevents students from seeing comparative data
     */
    match /analytics/{documentId} {
      // Only teachers and admins can read analytics
      allow read: if isTeacher();

      // No client-side writes - analytics should be generated server-side
      allow write: if false;
    }

    // ============================================================================
    // DEFAULT DENY-ALL RULE
    // ============================================================================

    /**
     * Catch-all rule: Deny access to any other collections not explicitly defined
     * This is a security best practice - be explicit about what's allowed
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
